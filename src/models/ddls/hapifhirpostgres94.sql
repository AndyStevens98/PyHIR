CREATE SEQUENCE SEQ_BLKEXCOL_PID START 1 increment 50;

CREATE SEQUENCE SEQ_BLKEXCOLFILE_PID START 1 increment 50;

CREATE SEQUENCE SEQ_BLKEXJOB_PID START 1 increment 50;

CREATE SEQUENCE SEQ_BLKIMJOB_PID START 1 increment 50;

CREATE SEQUENCE SEQ_BLKIMJOBFILE_PID START 1 increment 50;

CREATE SEQUENCE SEQ_CNCPT_MAP_GRP_ELM_TGT_PID START 1 increment 50;

CREATE SEQUENCE SEQ_CODESYSTEM_PID START 1 increment 50;

CREATE SEQUENCE SEQ_CODESYSTEMVER_PID START 1 increment 50;

CREATE SEQUENCE SEQ_CONCEPT_DESIG_PID START 1 increment 50;

CREATE SEQUENCE SEQ_CONCEPT_MAP_GROUP_PID START 1 increment 50;

CREATE SEQUENCE SEQ_CONCEPT_MAP_GRP_ELM_PID START 1 increment 50;

CREATE SEQUENCE SEQ_CONCEPT_MAP_PID START 1 increment 50;

CREATE SEQUENCE SEQ_CONCEPT_PC_PID START 1 increment 50;

CREATE SEQUENCE SEQ_CONCEPT_PID START 1 increment 50;

CREATE SEQUENCE SEQ_CONCEPT_PROP_PID START 1 increment 50;

CREATE SEQUENCE SEQ_EMPI_LINK_ID START 1 increment 50;

CREATE SEQUENCE SEQ_FORCEDID_ID START 1 increment 50;

CREATE SEQUENCE SEQ_HISTORYTAG_ID START 1 increment 50;

CREATE SEQUENCE SEQ_IDXCMBTOKNU_ID START 1 increment 50;

CREATE SEQUENCE SEQ_IDXCMPSTRUNIQ_ID START 1 increment 50;

CREATE SEQUENCE SEQ_NPM_PACK START 1 increment 50;

CREATE SEQUENCE SEQ_NPM_PACKVER START 1 increment 50;

CREATE SEQUENCE SEQ_NPM_PACKVERRES START 1 increment 50;

CREATE SEQUENCE SEQ_RES_REINDEX_JOB START 1 increment 50;

CREATE SEQUENCE SEQ_RESLINK_ID START 1 increment 50;

CREATE SEQUENCE SEQ_RESOURCE_HISTORY_ID START 1 increment 50;

CREATE SEQUENCE SEQ_RESOURCE_ID START 1 increment 50;

CREATE SEQUENCE SEQ_RESPARMPRESENT_ID START 1 increment 50;

CREATE SEQUENCE SEQ_RESTAG_ID START 1 increment 50;

CREATE SEQUENCE SEQ_SEARCH START 1 increment 50;

CREATE SEQUENCE SEQ_SEARCH_INC START 1 increment 50;

CREATE SEQUENCE SEQ_SEARCH_RES START 1 increment 50;

CREATE SEQUENCE SEQ_SPIDX_COORDS START 1 increment 50;

CREATE SEQUENCE SEQ_SPIDX_DATE START 1 increment 50;

CREATE SEQUENCE SEQ_SPIDX_NUMBER START 1 increment 50;

CREATE SEQUENCE SEQ_SPIDX_QUANTITY START 1 increment 50;

CREATE SEQUENCE SEQ_SPIDX_QUANTITY_NRML START 1 increment 50;

CREATE SEQUENCE SEQ_SPIDX_STRING START 1 increment 50;

CREATE SEQUENCE SEQ_SPIDX_TOKEN START 1 increment 50;

CREATE SEQUENCE SEQ_SPIDX_URI START 1 increment 50;

CREATE SEQUENCE SEQ_SUBSCRIPTION_ID START 1 increment 50;

CREATE SEQUENCE SEQ_TAGDEF_ID START 1 increment 50;

CREATE SEQUENCE SEQ_VALUESET_C_DSGNTN_PID START 1 increment 50;

CREATE SEQUENCE SEQ_VALUESET_CONCEPT_PID START 1 increment 50;

CREATE SEQUENCE SEQ_VALUESET_PID START 1 increment 50;

CREATE TABLE BT2_JOB_INSTANCE (
   ID VARCHAR(100) NOT NULL,
   JOB_CANCELLED BOOLEAN NOT NULL,
   CMB_RECS_PROCESSED INT4,
   CMB_RECS_PER_SEC FLOAT8,
   CREATE_TIME TIMESTAMP NOT NULL,
   CUR_GATED_STEP_ID VARCHAR(100),
   DEFINITION_ID VARCHAR(100) NOT NULL,
   DEFINITION_VER INT4 NOT NULL,
   END_TIME TIMESTAMP,
   ERROR_COUNT INT4,
   ERROR_MSG VARCHAR(500),
   EST_REMAINING VARCHAR(100),
   FAST_TRACKING BOOLEAN,
   PARAMS_JSON VARCHAR(2000),
   PARAMS_JSON_LOB OID,
   PROGRESS_PCT FLOAT8,
   REPORT OID,
   START_TIME TIMESTAMP,
   STAT VARCHAR(20) NOT NULL,
   TOT_ELAPSED_MILLIS INT4,
   WORK_CHUNKS_PURGED BOOLEAN NOT NULL,
   PRIMARY KEY (ID)
);

CREATE TABLE BT2_WORK_CHUNK (
   ID VARCHAR(100) NOT NULL,
   CREATE_TIME TIMESTAMP NOT NULL,
   END_TIME TIMESTAMP,
   ERROR_COUNT INT4 NOT NULL,
   ERROR_MSG VARCHAR(500),
   INSTANCE_ID VARCHAR(100) NOT NULL,
   DEFINITION_ID VARCHAR(100) NOT NULL,
   DEFINITION_VER INT4 NOT NULL,
   RECORDS_PROCESSED INT4,
   SEQ INT4 NOT NULL,
   CHUNK_DATA OID,
   START_TIME TIMESTAMP,
   STAT VARCHAR(20) NOT NULL,
   TGT_STEP_ID VARCHAR(100) NOT NULL,
   PRIMARY KEY (ID)
);

CREATE TABLE HFJ_BINARY_STORAGE_BLOB (
   BLOB_ID VARCHAR(200) NOT NULL,
   BLOB_DATA OID NOT NULL,
   CONTENT_TYPE VARCHAR(100) NOT NULL,
   BLOB_HASH VARCHAR(128),
   PUBLISHED_DATE TIMESTAMP NOT NULL,
   RESOURCE_ID VARCHAR(100) NOT NULL,
   BLOB_SIZE INT8,
   PRIMARY KEY (BLOB_ID)
);

CREATE TABLE HFJ_BLK_EXPORT_COLFILE (
   PID INT8 NOT NULL,
   RES_ID VARCHAR(100) NOT NULL,
   COLLECTION_PID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_BLK_EXPORT_COLLECTION (
   PID INT8 NOT NULL,
   TYPE_FILTER VARCHAR(1000),
   RES_TYPE VARCHAR(40) NOT NULL,
   OPTLOCK INT4 NOT NULL,
   JOB_PID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_BLK_EXPORT_JOB (
   PID INT8 NOT NULL,
   CREATED_TIME TIMESTAMP NOT NULL,
   EXP_TIME TIMESTAMP,
   JOB_ID VARCHAR(36) NOT NULL,
   REQUEST VARCHAR(1024) NOT NULL,
   EXP_SINCE TIMESTAMP,
   JOB_STATUS VARCHAR(10) NOT NULL,
   STATUS_MESSAGE VARCHAR(500),
   STATUS_TIME TIMESTAMP NOT NULL,
   OPTLOCK INT4 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_BLK_IMPORT_JOB (
   PID INT8 NOT NULL,
   BATCH_SIZE INT4 NOT NULL,
   FILE_COUNT INT4 NOT NULL,
   JOB_DESC VARCHAR(500),
   JOB_ID VARCHAR(36) NOT NULL,
   ROW_PROCESSING_MODE VARCHAR(20) NOT NULL,
   JOB_STATUS VARCHAR(10) NOT NULL,
   STATUS_MESSAGE VARCHAR(500),
   STATUS_TIME TIMESTAMP NOT NULL,
   OPTLOCK INT4 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_BLK_IMPORT_JOBFILE (
   PID INT8 NOT NULL,
   JOB_CONTENTS OID NOT NULL,
   FILE_DESCRIPTION VARCHAR(500),
   FILE_SEQ INT4 NOT NULL,
   TENANT_NAME VARCHAR(200),
   JOB_PID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_FORCED_ID (
   PID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   FORCED_ID VARCHAR(100) NOT NULL,
   RESOURCE_PID INT8 NOT NULL,
   RESOURCE_TYPE VARCHAR(100) DEFAULT '',
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_HISTORY_TAG (
   PID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   TAG_ID INT8,
   RES_VER_PID INT8 NOT NULL,
   RES_ID INT8 NOT NULL,
   RES_TYPE VARCHAR(40) NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_IDX_CMB_TOK_NU (
   PID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   HASH_COMPLETE INT8 NOT NULL,
   IDX_STRING VARCHAR(500) NOT NULL,
   RES_ID INT8,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_IDX_CMP_STRING_UNIQ (
   PID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   IDX_STRING VARCHAR(500) NOT NULL,
   RES_ID INT8,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_PARTITION (
   PART_ID INT4 NOT NULL,
   PART_DESC VARCHAR(200),
   PART_NAME VARCHAR(200) NOT NULL,
   PRIMARY KEY (PART_ID)
);

CREATE TABLE HFJ_RES_LINK (
   PID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   SRC_PATH VARCHAR(500) NOT NULL,
   SRC_RESOURCE_ID INT8 NOT NULL,
   SOURCE_RESOURCE_TYPE VARCHAR(40) NOT NULL,
   TARGET_RESOURCE_ID INT8,
   TARGET_RESOURCE_TYPE VARCHAR(40) NOT NULL,
   TARGET_RESOURCE_URL VARCHAR(200),
   TARGET_RESOURCE_VERSION INT8,
   SP_UPDATED TIMESTAMP,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_RES_PARAM_PRESENT (
   PID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   HASH_PRESENCE INT8,
   SP_PRESENT BOOLEAN NOT NULL,
   RES_ID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_RES_REINDEX_JOB (
   PID INT8 NOT NULL,
   JOB_DELETED BOOLEAN NOT NULL,
   REINDEX_COUNT INT4,
   RES_TYPE VARCHAR(100),
   SUSPENDED_UNTIL TIMESTAMP,
   UPDATE_THRESHOLD_HIGH TIMESTAMP NOT NULL,
   UPDATE_THRESHOLD_LOW TIMESTAMP,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_RES_TAG (
   PID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   TAG_ID INT8,
   RES_ID INT8,
   RES_TYPE VARCHAR(40) NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_RES_VER (
   PID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   RES_DELETED_AT TIMESTAMP,
   RES_VERSION VARCHAR(7),
   HAS_TAGS BOOLEAN NOT NULL,
   RES_PUBLISHED TIMESTAMP NOT NULL,
   RES_UPDATED TIMESTAMP NOT NULL,
   RES_ENCODING VARCHAR(5) NOT NULL,
   RES_TEXT OID,
   RES_ID INT8 NOT NULL,
   RES_TEXT_VC VARCHAR(4000),
   RES_TYPE VARCHAR(40) NOT NULL,
   RES_VER INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_RES_VER_PROV (
   RES_VER_PID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   REQUEST_ID VARCHAR(16),
   SOURCE_URI VARCHAR(100),
   RES_PID INT8 NOT NULL,
   PRIMARY KEY (RES_VER_PID)
);

CREATE TABLE HFJ_RESOURCE (
   RES_ID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   RES_DELETED_AT TIMESTAMP,
   RES_VERSION VARCHAR(7),
   HAS_TAGS BOOLEAN NOT NULL,
   RES_PUBLISHED TIMESTAMP NOT NULL,
   RES_UPDATED TIMESTAMP NOT NULL,
   SP_HAS_LINKS BOOLEAN,
   HASH_SHA256 VARCHAR(64),
   SP_INDEX_STATUS INT8,
   RES_LANGUAGE VARCHAR(20),
   SP_CMPSTR_UNIQ_PRESENT BOOLEAN,
   SP_CMPTOKS_PRESENT BOOLEAN,
   SP_COORDS_PRESENT BOOLEAN,
   SP_DATE_PRESENT BOOLEAN,
   SP_NUMBER_PRESENT BOOLEAN,
   SP_QUANTITY_NRML_PRESENT BOOLEAN,
   SP_QUANTITY_PRESENT BOOLEAN,
   SP_STRING_PRESENT BOOLEAN,
   SP_TOKEN_PRESENT BOOLEAN,
   SP_URI_PRESENT BOOLEAN,
   RES_TYPE VARCHAR(40) NOT NULL,
   RES_VER INT8,
   PRIMARY KEY (RES_ID)
);

CREATE TABLE HFJ_SEARCH (
   PID INT8 NOT NULL,
   CREATED TIMESTAMP NOT NULL,
   SEARCH_DELETED BOOLEAN,
   EXPIRY_OR_NULL TIMESTAMP,
   FAILURE_CODE INT4,
   FAILURE_MESSAGE VARCHAR(500),
   LAST_UPDATED_HIGH TIMESTAMP,
   LAST_UPDATED_LOW TIMESTAMP,
   NUM_BLOCKED INT4,
   NUM_FOUND INT4 NOT NULL,
   PREFERRED_PAGE_SIZE INT4,
   RESOURCE_ID INT8,
   RESOURCE_TYPE VARCHAR(200),
   SEARCH_PARAM_MAP OID,
   SEARCH_QUERY_STRING OID,
   SEARCH_QUERY_STRING_HASH INT4,
   SEARCH_TYPE INT4 NOT NULL,
   SEARCH_STATUS VARCHAR(10) NOT NULL,
   TOTAL_COUNT INT4,
   SEARCH_UUID VARCHAR(36) NOT NULL,
   OPTLOCK_VERSION INT4,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_SEARCH_INCLUDE (
   PID INT8 NOT NULL,
   SEARCH_INCLUDE VARCHAR(200) NOT NULL,
   INC_RECURSE BOOLEAN NOT NULL,
   REVINCLUDE BOOLEAN NOT NULL,
   SEARCH_PID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_SEARCH_RESULT (
   PID INT8 NOT NULL,
   SEARCH_ORDER INT4 NOT NULL,
   RESOURCE_PID INT8 NOT NULL,
   SEARCH_PID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_SPIDX_COORDS (
   SP_ID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   SP_MISSING BOOLEAN NOT NULL,
   SP_NAME VARCHAR(100) NOT NULL,
   RES_ID INT8 NOT NULL,
   RES_TYPE VARCHAR(100) NOT NULL,
   SP_UPDATED TIMESTAMP,
   HASH_IDENTITY INT8,
   SP_LATITUDE FLOAT8,
   SP_LONGITUDE FLOAT8,
   PRIMARY KEY (SP_ID)
);

CREATE TABLE HFJ_SPIDX_DATE (
   SP_ID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   SP_MISSING BOOLEAN NOT NULL,
   SP_NAME VARCHAR(100) NOT NULL,
   RES_ID INT8 NOT NULL,
   RES_TYPE VARCHAR(100) NOT NULL,
   SP_UPDATED TIMESTAMP,
   HASH_IDENTITY INT8,
   SP_VALUE_HIGH TIMESTAMP,
   SP_VALUE_HIGH_DATE_ORDINAL INT4,
   SP_VALUE_LOW TIMESTAMP,
   SP_VALUE_LOW_DATE_ORDINAL INT4,
   PRIMARY KEY (SP_ID)
);

CREATE TABLE HFJ_SPIDX_NUMBER (
   SP_ID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   SP_MISSING BOOLEAN NOT NULL,
   SP_NAME VARCHAR(100) NOT NULL,
   RES_ID INT8 NOT NULL,
   RES_TYPE VARCHAR(100) NOT NULL,
   SP_UPDATED TIMESTAMP,
   HASH_IDENTITY INT8,
   SP_VALUE numeric(19, 2),
   PRIMARY KEY (SP_ID)
);

CREATE TABLE HFJ_SPIDX_QUANTITY (
   SP_ID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   SP_MISSING BOOLEAN NOT NULL,
   SP_NAME VARCHAR(100) NOT NULL,
   RES_ID INT8 NOT NULL,
   RES_TYPE VARCHAR(100) NOT NULL,
   SP_UPDATED TIMESTAMP,
   HASH_IDENTITY INT8,
   HASH_IDENTITY_AND_UNITS INT8,
   HASH_IDENTITY_SYS_UNITS INT8,
   SP_SYSTEM VARCHAR(200),
   SP_UNITS VARCHAR(200),
   SP_VALUE FLOAT8,
   PRIMARY KEY (SP_ID)
);

CREATE TABLE HFJ_SPIDX_QUANTITY_NRML (
   SP_ID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   SP_MISSING BOOLEAN NOT NULL,
   SP_NAME VARCHAR(100) NOT NULL,
   RES_ID INT8 NOT NULL,
   RES_TYPE VARCHAR(100) NOT NULL,
   SP_UPDATED TIMESTAMP,
   HASH_IDENTITY INT8,
   HASH_IDENTITY_AND_UNITS INT8,
   HASH_IDENTITY_SYS_UNITS INT8,
   SP_SYSTEM VARCHAR(200),
   SP_UNITS VARCHAR(200),
   SP_VALUE FLOAT8,
   PRIMARY KEY (SP_ID)
);

CREATE TABLE HFJ_SPIDX_STRING (
   SP_ID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   SP_MISSING BOOLEAN NOT NULL,
   SP_NAME VARCHAR(100) NOT NULL,
   RES_ID INT8 NOT NULL,
   RES_TYPE VARCHAR(100) NOT NULL,
   SP_UPDATED TIMESTAMP,
   HASH_EXACT INT8,
   HASH_IDENTITY INT8,
   HASH_NORM_PREFIX INT8,
   SP_VALUE_EXACT VARCHAR(200),
   SP_VALUE_NORMALIZED VARCHAR(200),
   PRIMARY KEY (SP_ID)
);

CREATE TABLE HFJ_SPIDX_TOKEN (
   SP_ID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   SP_MISSING BOOLEAN NOT NULL,
   SP_NAME VARCHAR(100) NOT NULL,
   RES_ID INT8 NOT NULL,
   RES_TYPE VARCHAR(100) NOT NULL,
   SP_UPDATED TIMESTAMP,
   HASH_IDENTITY INT8,
   HASH_SYS INT8,
   HASH_SYS_AND_VALUE INT8,
   HASH_VALUE INT8,
   SP_SYSTEM VARCHAR(200),
   SP_VALUE VARCHAR(200),
   PRIMARY KEY (SP_ID)
);

CREATE TABLE HFJ_SPIDX_URI (
   SP_ID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   SP_MISSING BOOLEAN NOT NULL,
   SP_NAME VARCHAR(100) NOT NULL,
   RES_ID INT8 NOT NULL,
   RES_TYPE VARCHAR(100) NOT NULL,
   SP_UPDATED TIMESTAMP,
   HASH_IDENTITY INT8,
   HASH_URI INT8,
   SP_URI VARCHAR(500),
   PRIMARY KEY (SP_ID)
);

CREATE TABLE HFJ_SUBSCRIPTION_STATS (
   PID INT8 NOT NULL,
   CREATED_TIME TIMESTAMP NOT NULL,
   RES_ID INT8,
   PRIMARY KEY (PID)
);

CREATE TABLE HFJ_TAG_DEF (
   TAG_ID INT8 NOT NULL,
   TAG_CODE VARCHAR(200),
   TAG_DISPLAY VARCHAR(200),
   TAG_SYSTEM VARCHAR(200),
   TAG_TYPE INT4 NOT NULL,
   PRIMARY KEY (TAG_ID)
);

CREATE TABLE MPI_LINK (
   PID INT8 NOT NULL,
   PARTITION_DATE DATE,
   PARTITION_ID INT4,
   CREATED TIMESTAMP NOT NULL,
   EID_MATCH BOOLEAN,
   GOLDEN_RESOURCE_PID INT8 NOT NULL,
   NEW_PERSON BOOLEAN,
   LINK_SOURCE INT4 NOT NULL,
   MATCH_RESULT INT4 NOT NULL,
   TARGET_TYPE VARCHAR(40),
   PERSON_PID INT8 NOT NULL,
   RULE_COUNT INT8,
   SCORE FLOAT8,
   TARGET_PID INT8 NOT NULL,
   UPDATED TIMESTAMP NOT NULL,
   VECTOR INT8,
   VERSION VARCHAR(16) NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE NPM_PACKAGE (
   PID INT8 NOT NULL,
   CUR_VERSION_ID VARCHAR(200),
   PACKAGE_DESC VARCHAR(200),
   PACKAGE_ID VARCHAR(200) NOT NULL,
   UPDATED_TIME TIMESTAMP NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE NPM_PACKAGE_VER (
   PID INT8 NOT NULL,
   CURRENT_VERSION BOOLEAN NOT NULL,
   PKG_DESC VARCHAR(200),
   DESC_UPPER VARCHAR(200),
   FHIR_VERSION VARCHAR(10) NOT NULL,
   FHIR_VERSION_ID VARCHAR(20) NOT NULL,
   PACKAGE_ID VARCHAR(200) NOT NULL,
   PACKAGE_SIZE_BYTES INT8 NOT NULL,
   SAVED_TIME TIMESTAMP NOT NULL,
   UPDATED_TIME TIMESTAMP NOT NULL,
   VERSION_ID VARCHAR(200) NOT NULL,
   PACKAGE_PID INT8 NOT NULL,
   BINARY_RES_ID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE NPM_PACKAGE_VER_RES (
   PID INT8 NOT NULL,
   CANONICAL_URL VARCHAR(200),
   CANONICAL_VERSION VARCHAR(200),
   FILE_DIR VARCHAR(200),
   FHIR_VERSION VARCHAR(10) NOT NULL,
   FHIR_VERSION_ID VARCHAR(20) NOT NULL,
   FILE_NAME VARCHAR(200),
   RES_SIZE_BYTES INT8 NOT NULL,
   RES_TYPE VARCHAR(40) NOT NULL,
   UPDATED_TIME TIMESTAMP NOT NULL,
   PACKVER_PID INT8 NOT NULL,
   BINARY_RES_ID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_CODESYSTEM (
   PID INT8 NOT NULL,
   CODE_SYSTEM_URI VARCHAR(200) NOT NULL,
   CURRENT_VERSION_PID INT8,
   CS_NAME VARCHAR(200),
   RES_ID INT8,
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_CODESYSTEM_VER (
   PID INT8 NOT NULL,
   CS_DISPLAY VARCHAR(200),
   CODESYSTEM_PID INT8,
   CS_VERSION_ID VARCHAR(200),
   RES_ID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_CONCEPT (
   PID INT8 NOT NULL,
   CODEVAL VARCHAR(500) NOT NULL,
   CODESYSTEM_PID INT8,
   DISPLAY VARCHAR(400),
   INDEX_STATUS INT8,
   PARENT_PIDS OID,
   CODE_SEQUENCE INT4,
   CONCEPT_UPDATED TIMESTAMP,
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_CONCEPT_DESIG (
   PID INT8 NOT NULL,
   LANG VARCHAR(500),
   USE_CODE VARCHAR(500),
   USE_DISPLAY VARCHAR(500),
   USE_SYSTEM VARCHAR(500),
   VAL VARCHAR(2000) NOT NULL,
   CS_VER_PID INT8,
   CONCEPT_PID INT8,
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_CONCEPT_MAP (
   PID INT8 NOT NULL,
   RES_ID INT8,
   SOURCE_URL VARCHAR(200),
   TARGET_URL VARCHAR(200),
   URL VARCHAR(200) NOT NULL,
   VER VARCHAR(200),
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_CONCEPT_MAP_GROUP (
   PID INT8 NOT NULL,
   CONCEPT_MAP_URL VARCHAR(200),
   SOURCE_URL VARCHAR(200) NOT NULL,
   SOURCE_VS VARCHAR(200),
   SOURCE_VERSION VARCHAR(200),
   TARGET_URL VARCHAR(200) NOT NULL,
   TARGET_VS VARCHAR(200),
   TARGET_VERSION VARCHAR(200),
   CONCEPT_MAP_PID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_CONCEPT_MAP_GRP_ELEMENT (
   PID INT8 NOT NULL,
   SOURCE_CODE VARCHAR(500) NOT NULL,
   CONCEPT_MAP_URL VARCHAR(200),
   SOURCE_DISPLAY VARCHAR(500),
   SYSTEM_URL VARCHAR(200),
   SYSTEM_VERSION VARCHAR(200),
   VALUESET_URL VARCHAR(200),
   CONCEPT_MAP_GROUP_PID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_CONCEPT_MAP_GRP_ELM_TGT (
   PID INT8 NOT NULL,
   TARGET_CODE VARCHAR(500) NOT NULL,
   CONCEPT_MAP_URL VARCHAR(200),
   TARGET_DISPLAY VARCHAR(500),
   TARGET_EQUIVALENCE VARCHAR(50),
   SYSTEM_URL VARCHAR(200),
   SYSTEM_VERSION VARCHAR(200),
   VALUESET_URL VARCHAR(200),
   CONCEPT_MAP_GRP_ELM_PID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_CONCEPT_PC_LINK (
   PID INT8 NOT NULL,
   CHILD_PID INT8,
   CODESYSTEM_PID INT8 NOT NULL,
   PARENT_PID INT8,
   REL_TYPE INT4,
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_CONCEPT_PROPERTY (
   PID INT8 NOT NULL,
   PROP_CODESYSTEM VARCHAR(500),
   PROP_DISPLAY VARCHAR(500),
   PROP_KEY VARCHAR(500) NOT NULL,
   PROP_TYPE INT4 NOT NULL,
   PROP_VAL VARCHAR(500),
   PROP_VAL_LOB OID,
   CS_VER_PID INT8,
   CONCEPT_PID INT8,
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_VALUESET (
   PID INT8 NOT NULL,
   EXPANSION_STATUS VARCHAR(50) NOT NULL,
   EXPANDED_AT TIMESTAMP,
   VSNAME VARCHAR(200),
   RES_ID INT8,
   TOTAL_CONCEPT_DESIGNATIONS INT8 DEFAULT 0 NOT NULL,
   TOTAL_CONCEPTS INT8 DEFAULT 0 NOT NULL,
   URL VARCHAR(200) NOT NULL,
   VER VARCHAR(200),
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_VALUESET_C_DESIGNATION (
   PID INT8 NOT NULL,
   VALUESET_CONCEPT_PID INT8 NOT NULL,
   LANG VARCHAR(500),
   USE_CODE VARCHAR(500),
   USE_DISPLAY VARCHAR(500),
   USE_SYSTEM VARCHAR(500),
   VAL VARCHAR(2000) NOT NULL,
   VALUESET_PID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE TABLE TRM_VALUESET_CONCEPT (
   PID INT8 NOT NULL,
   CODEVAL VARCHAR(500) NOT NULL,
   DISPLAY VARCHAR(400),
   INDEX_STATUS INT8,
   VALUESET_ORDER INT4 NOT NULL,
   SOURCE_DIRECT_PARENT_PIDS OID,
   SOURCE_PID INT8,
   SYSTEM_URL VARCHAR(200) NOT NULL,
   SYSTEM_VER VARCHAR(200),
   VALUESET_PID INT8 NOT NULL,
   PRIMARY KEY (PID)
);

CREATE INDEX IDX_BT2JI_CT ON BT2_JOB_INSTANCE (CREATE_TIME);

CREATE INDEX IDX_BT2WC_II_SEQ ON BT2_WORK_CHUNK (INSTANCE_ID, SEQ);

CREATE INDEX IDX_BLKEX_EXPTIME ON HFJ_BLK_EXPORT_JOB (EXP_TIME);

ALTER TABLE IF EXISTS HFJ_BLK_EXPORT_JOB
ADD CONSTRAINT IDX_BLKEX_JOB_ID UNIQUE (JOB_ID);

ALTER TABLE IF EXISTS HFJ_BLK_IMPORT_JOB
ADD CONSTRAINT IDX_BLKIM_JOB_ID UNIQUE (JOB_ID);

CREATE INDEX IDX_BLKIM_JOBFILE_JOBID ON HFJ_BLK_IMPORT_JOBFILE (JOB_PID);

CREATE INDEX IDX_FORCEID_FID ON HFJ_FORCED_ID (FORCED_ID);

ALTER TABLE IF EXISTS HFJ_FORCED_ID
ADD CONSTRAINT IDX_FORCEDID_RESID UNIQUE (RESOURCE_PID);

ALTER TABLE IF EXISTS HFJ_FORCED_ID
ADD CONSTRAINT IDX_FORCEDID_TYPE_FID UNIQUE (RESOURCE_TYPE, FORCED_ID);

CREATE INDEX IDX_RESHISTTAG_RESID ON HFJ_HISTORY_TAG (RES_ID);

ALTER TABLE IF EXISTS HFJ_HISTORY_TAG
ADD CONSTRAINT IDX_RESHISTTAG_TAGID UNIQUE (RES_VER_PID, TAG_ID);

CREATE INDEX IDX_IDXCMBTOKNU_STR ON HFJ_IDX_CMB_TOK_NU (IDX_STRING);

CREATE INDEX IDX_IDXCMBTOKNU_RES ON HFJ_IDX_CMB_TOK_NU (RES_ID);

CREATE INDEX IDX_IDXCMPSTRUNIQ_RESOURCE ON HFJ_IDX_CMP_STRING_UNIQ (RES_ID);

ALTER TABLE IF EXISTS HFJ_IDX_CMP_STRING_UNIQ
ADD CONSTRAINT IDX_IDXCMPSTRUNIQ_STRING UNIQUE (IDX_STRING);

ALTER TABLE IF EXISTS HFJ_PARTITION
ADD CONSTRAINT IDX_PART_NAME UNIQUE (PART_NAME);

CREATE INDEX IDX_RL_TPATHRES ON HFJ_RES_LINK (SRC_PATH, TARGET_RESOURCE_ID);

CREATE INDEX IDX_RL_SRC ON HFJ_RES_LINK (SRC_RESOURCE_ID);

CREATE INDEX IDX_RL_DEST ON HFJ_RES_LINK (TARGET_RESOURCE_ID);

CREATE INDEX IDX_RESPARMPRESENT_RESID ON HFJ_RES_PARAM_PRESENT (RES_ID);

CREATE INDEX IDX_RESPARMPRESENT_HASHPRES ON HFJ_RES_PARAM_PRESENT (HASH_PRESENCE);

CREATE INDEX IDX_RES_TAG_RES_TAG ON HFJ_RES_TAG (RES_ID, TAG_ID, PARTITION_ID);

CREATE INDEX IDX_RES_TAG_TAG_RES ON HFJ_RES_TAG (TAG_ID, RES_ID, PARTITION_ID);

ALTER TABLE IF EXISTS HFJ_RES_TAG
ADD CONSTRAINT IDX_RESTAG_TAGID UNIQUE (RES_ID, TAG_ID);

CREATE INDEX IDX_RESVER_TYPE_DATE ON HFJ_RES_VER (RES_TYPE, RES_UPDATED);

CREATE INDEX IDX_RESVER_ID_DATE ON HFJ_RES_VER (RES_ID, RES_UPDATED);

CREATE INDEX IDX_RESVER_DATE ON HFJ_RES_VER (RES_UPDATED);

ALTER TABLE IF EXISTS HFJ_RES_VER
ADD CONSTRAINT IDX_RESVER_ID_VER UNIQUE (RES_ID, RES_VER);

CREATE INDEX IDX_RESVERPROV_SOURCEURI ON HFJ_RES_VER_PROV (SOURCE_URI);

CREATE INDEX IDX_RESVERPROV_REQUESTID ON HFJ_RES_VER_PROV (REQUEST_ID);

CREATE INDEX IDX_RES_DATE ON HFJ_RESOURCE (RES_UPDATED);

CREATE INDEX IDX_RES_TYPE_DEL_UPDATED ON HFJ_RESOURCE (
   RES_TYPE,
   RES_DELETED_AT,
   RES_UPDATED,
   PARTITION_ID,
   RES_ID
);

CREATE INDEX IDX_SEARCH_RESTYPE_HASHS ON HFJ_SEARCH (RESOURCE_TYPE, SEARCH_QUERY_STRING_HASH, CREATED);

CREATE INDEX IDX_SEARCH_CREATED ON HFJ_SEARCH (CREATED);

ALTER TABLE IF EXISTS HFJ_SEARCH
ADD CONSTRAINT IDX_SEARCH_UUID UNIQUE (SEARCH_UUID);

ALTER TABLE IF EXISTS HFJ_SEARCH_RESULT
ADD CONSTRAINT IDX_SEARCHRES_ORDER UNIQUE (SEARCH_PID, SEARCH_ORDER);

CREATE INDEX IDX_SP_COORDS_HASH ON HFJ_SPIDX_COORDS (HASH_IDENTITY, SP_LATITUDE, SP_LONGITUDE);

CREATE INDEX IDX_SP_COORDS_UPDATED ON HFJ_SPIDX_COORDS (SP_UPDATED);

CREATE INDEX IDX_SP_COORDS_RESID ON HFJ_SPIDX_COORDS (RES_ID);

CREATE INDEX IDX_SP_DATE_HASH_V2 ON HFJ_SPIDX_DATE (
   HASH_IDENTITY,
   SP_VALUE_LOW,
   SP_VALUE_HIGH,
   RES_ID,
   PARTITION_ID
);

CREATE INDEX IDX_SP_DATE_HASH_HIGH_V2 ON HFJ_SPIDX_DATE (
   HASH_IDENTITY,
   SP_VALUE_HIGH,
   RES_ID,
   PARTITION_ID
);

CREATE INDEX IDX_SP_DATE_ORD_HASH_V2 ON HFJ_SPIDX_DATE (
   HASH_IDENTITY,
   SP_VALUE_LOW_DATE_ORDINAL,
   SP_VALUE_HIGH_DATE_ORDINAL,
   RES_ID,
   PARTITION_ID
);

CREATE INDEX IDX_SP_DATE_ORD_HASH_HIGH_V2 ON HFJ_SPIDX_DATE (
   HASH_IDENTITY,
   SP_VALUE_HIGH_DATE_ORDINAL,
   RES_ID,
   PARTITION_ID
);

CREATE INDEX IDX_SP_DATE_RESID_V2 ON HFJ_SPIDX_DATE (
   RES_ID,
   HASH_IDENTITY,
   SP_VALUE_LOW,
   SP_VALUE_HIGH,
   SP_VALUE_LOW_DATE_ORDINAL,
   SP_VALUE_HIGH_DATE_ORDINAL,
   PARTITION_ID
);

CREATE INDEX IDX_SP_NUMBER_HASH_VAL_V2 ON HFJ_SPIDX_NUMBER (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);

CREATE INDEX IDX_SP_NUMBER_RESID_V2 ON HFJ_SPIDX_NUMBER (RES_ID, HASH_IDENTITY, SP_VALUE, PARTITION_ID);

CREATE INDEX IDX_SP_QUANTITY_HASH_V2 ON HFJ_SPIDX_QUANTITY (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);

CREATE INDEX IDX_SP_QUANTITY_HASH_UN_V2 ON HFJ_SPIDX_QUANTITY (
   HASH_IDENTITY_AND_UNITS,
   SP_VALUE,
   RES_ID,
   PARTITION_ID
);

CREATE INDEX IDX_SP_QUANTITY_HASH_SYSUN_V2 ON HFJ_SPIDX_QUANTITY (
   HASH_IDENTITY_SYS_UNITS,
   SP_VALUE,
   RES_ID,
   PARTITION_ID
);

CREATE INDEX IDX_SP_QUANTITY_RESID_V2 ON HFJ_SPIDX_QUANTITY (
   RES_ID,
   HASH_IDENTITY,
   HASH_IDENTITY_SYS_UNITS,
   HASH_IDENTITY_AND_UNITS,
   SP_VALUE,
   PARTITION_ID
);

CREATE INDEX IDX_SP_QNTY_NRML_HASH_V2 ON HFJ_SPIDX_QUANTITY_NRML (HASH_IDENTITY, SP_VALUE, RES_ID, PARTITION_ID);

CREATE INDEX IDX_SP_QNTY_NRML_HASH_UN_V2 ON HFJ_SPIDX_QUANTITY_NRML (
   HASH_IDENTITY_AND_UNITS,
   SP_VALUE,
   RES_ID,
   PARTITION_ID
);

CREATE INDEX IDX_SP_QNTY_NRML_HASH_SYSUN_V2 ON HFJ_SPIDX_QUANTITY_NRML (
   HASH_IDENTITY_SYS_UNITS,
   SP_VALUE,
   RES_ID,
   PARTITION_ID
);

CREATE INDEX IDX_SP_QNTY_NRML_RESID_V2 ON HFJ_SPIDX_QUANTITY_NRML (
   RES_ID,
   HASH_IDENTITY,
   HASH_IDENTITY_SYS_UNITS,
   HASH_IDENTITY_AND_UNITS,
   SP_VALUE,
   PARTITION_ID
);

CREATE INDEX IDX_SP_STRING_HASH_IDENT ON HFJ_SPIDX_STRING (HASH_IDENTITY);

CREATE INDEX IDX_SP_STRING_HASH_NRM_V2 ON HFJ_SPIDX_STRING (
   HASH_NORM_PREFIX,
   SP_VALUE_NORMALIZED,
   RES_ID,
   PARTITION_ID
);

CREATE INDEX IDX_SP_STRING_HASH_EXCT_V2 ON HFJ_SPIDX_STRING (HASH_EXACT, RES_ID, PARTITION_ID);

CREATE INDEX IDX_SP_STRING_RESID ON HFJ_SPIDX_STRING (RES_ID);

CREATE INDEX IDX_SP_TOKEN_HASH_V2 ON HFJ_SPIDX_TOKEN (
   HASH_IDENTITY,
   SP_SYSTEM,
   SP_VALUE,
   RES_ID,
   PARTITION_ID
);

CREATE INDEX IDX_SP_TOKEN_HASH_S_V2 ON HFJ_SPIDX_TOKEN (HASH_SYS, RES_ID, PARTITION_ID);

CREATE INDEX IDX_SP_TOKEN_HASH_SV_V2 ON HFJ_SPIDX_TOKEN (HASH_SYS_AND_VALUE, RES_ID, PARTITION_ID);

CREATE INDEX IDX_SP_TOKEN_HASH_V_V2 ON HFJ_SPIDX_TOKEN (HASH_VALUE, RES_ID, PARTITION_ID);

CREATE INDEX IDX_SP_TOKEN_RESID_V2 ON HFJ_SPIDX_TOKEN (
   RES_ID,
   HASH_SYS_AND_VALUE,
   HASH_VALUE,
   HASH_SYS,
   HASH_IDENTITY,
   PARTITION_ID
);

CREATE INDEX IDX_SP_URI ON HFJ_SPIDX_URI (RES_TYPE, SP_NAME, SP_URI);

CREATE INDEX IDX_SP_URI_HASH_IDENTITY ON HFJ_SPIDX_URI (HASH_IDENTITY, SP_URI);

CREATE INDEX IDX_SP_URI_HASH_URI ON HFJ_SPIDX_URI (HASH_URI);

CREATE INDEX IDX_SP_URI_RESTYPE_NAME ON HFJ_SPIDX_URI (RES_TYPE, SP_NAME);

CREATE INDEX IDX_SP_URI_UPDATED ON HFJ_SPIDX_URI (SP_UPDATED);

CREATE INDEX IDX_SP_URI_COORDS ON HFJ_SPIDX_URI (RES_ID);

ALTER TABLE IF EXISTS HFJ_SUBSCRIPTION_STATS
ADD CONSTRAINT IDX_SUBSC_RESID UNIQUE (RES_ID);

CREATE INDEX IDX_TAG_DEF_TP_CD_SYS ON HFJ_TAG_DEF (TAG_TYPE, TAG_CODE, TAG_SYSTEM, TAG_ID);

ALTER TABLE IF EXISTS HFJ_TAG_DEF
ADD CONSTRAINT IDX_TAGDEF_TYPESYSCODE UNIQUE (TAG_TYPE, TAG_SYSTEM, TAG_CODE);

CREATE INDEX IDX_EMPI_MATCH_TGT_VER ON MPI_LINK (MATCH_RESULT, TARGET_PID, VERSION);

ALTER TABLE IF EXISTS MPI_LINK
ADD CONSTRAINT IDX_EMPI_PERSON_TGT UNIQUE (PERSON_PID, TARGET_PID);

ALTER TABLE IF EXISTS NPM_PACKAGE
ADD CONSTRAINT IDX_PACK_ID UNIQUE (PACKAGE_ID);

ALTER TABLE IF EXISTS NPM_PACKAGE_VER
ADD CONSTRAINT IDX_PACKVER UNIQUE (PACKAGE_ID, VERSION_ID);

CREATE INDEX IDX_PACKVERRES_URL ON NPM_PACKAGE_VER_RES (CANONICAL_URL);

ALTER TABLE IF EXISTS TRM_CODESYSTEM
ADD CONSTRAINT IDX_CS_CODESYSTEM UNIQUE (CODE_SYSTEM_URI);

ALTER TABLE IF EXISTS TRM_CODESYSTEM_VER
ADD CONSTRAINT IDX_CODESYSTEM_AND_VER UNIQUE (CODESYSTEM_PID, CS_VERSION_ID);

CREATE INDEX IDX_CONCEPT_INDEXSTATUS ON TRM_CONCEPT (INDEX_STATUS);

CREATE INDEX IDX_CONCEPT_UPDATED ON TRM_CONCEPT (CONCEPT_UPDATED);

ALTER TABLE IF EXISTS TRM_CONCEPT
ADD CONSTRAINT IDX_CONCEPT_CS_CODE UNIQUE (CODESYSTEM_PID, CODEVAL);

CREATE INDEX FK_CONCEPTDESIG_CONCEPT ON TRM_CONCEPT_DESIG (CONCEPT_PID);

ALTER TABLE IF EXISTS TRM_CONCEPT_MAP
ADD CONSTRAINT IDX_CONCEPT_MAP_URL UNIQUE (URL, VER);

CREATE INDEX IDX_CNCPT_MAP_GRP_CD ON TRM_CONCEPT_MAP_GRP_ELEMENT (SOURCE_CODE);

CREATE INDEX IDX_CNCPT_MP_GRP_ELM_TGT_CD ON TRM_CONCEPT_MAP_GRP_ELM_TGT (TARGET_CODE);

CREATE INDEX FK_TERM_CONCEPTPC_CHILD ON TRM_CONCEPT_PC_LINK (CHILD_PID);

CREATE INDEX FK_TERM_CONCEPTPC_PARENT ON TRM_CONCEPT_PC_LINK (PARENT_PID);

CREATE INDEX FK_CONCEPTPROP_CONCEPT ON TRM_CONCEPT_PROPERTY (CONCEPT_PID);

ALTER TABLE IF EXISTS TRM_VALUESET
ADD CONSTRAINT IDX_VALUESET_URL UNIQUE (URL, VER);

CREATE INDEX FK_TRM_VALUESET_CONCEPT_PID ON TRM_VALUESET_C_DESIGNATION (VALUESET_CONCEPT_PID);

ALTER TABLE IF EXISTS TRM_VALUESET_CONCEPT
ADD CONSTRAINT IDX_VS_CONCEPT_CSCD UNIQUE (VALUESET_PID, SYSTEM_URL, CODEVAL);

ALTER TABLE IF EXISTS TRM_VALUESET_CONCEPT
ADD CONSTRAINT IDX_VS_CONCEPT_ORDER UNIQUE (VALUESET_PID, VALUESET_ORDER);

ALTER TABLE IF EXISTS BT2_WORK_CHUNK
ADD CONSTRAINT FK_BT2WC_INSTANCE FOREIGN KEY (INSTANCE_ID) REFERENCES BT2_JOB_INSTANCE;

ALTER TABLE IF EXISTS HFJ_BLK_EXPORT_COLFILE
ADD CONSTRAINT FK_BLKEXCOLFILE_COLLECT FOREIGN KEY (COLLECTION_PID) REFERENCES HFJ_BLK_EXPORT_COLLECTION;

ALTER TABLE IF EXISTS HFJ_BLK_EXPORT_COLLECTION
ADD CONSTRAINT FK_BLKEXCOL_JOB FOREIGN KEY (JOB_PID) REFERENCES HFJ_BLK_EXPORT_JOB;

ALTER TABLE IF EXISTS HFJ_BLK_IMPORT_JOBFILE
ADD CONSTRAINT FK_BLKIMJOBFILE_JOB FOREIGN KEY (JOB_PID) REFERENCES HFJ_BLK_IMPORT_JOB;

ALTER TABLE IF EXISTS HFJ_FORCED_ID
ADD CONSTRAINT FK_FORCEDID_RESOURCE FOREIGN KEY (RESOURCE_PID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_HISTORY_TAG
ADD CONSTRAINT FKtderym7awj6q8iq5c51xv4ndw FOREIGN KEY (TAG_ID) REFERENCES HFJ_TAG_DEF;

ALTER TABLE IF EXISTS HFJ_HISTORY_TAG
ADD CONSTRAINT FK_HISTORYTAG_HISTORY FOREIGN KEY (RES_VER_PID) REFERENCES HFJ_RES_VER;

ALTER TABLE IF EXISTS HFJ_IDX_CMB_TOK_NU
ADD CONSTRAINT FK_IDXCMBTOKNU_RES_ID FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_IDX_CMP_STRING_UNIQ
ADD CONSTRAINT FK_IDXCMPSTRUNIQ_RES_ID FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_RES_LINK
ADD CONSTRAINT FK_RESLINK_SOURCE FOREIGN KEY (SRC_RESOURCE_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_RES_LINK
ADD CONSTRAINT FK_RESLINK_TARGET FOREIGN KEY (TARGET_RESOURCE_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_RES_PARAM_PRESENT
ADD CONSTRAINT FK_RESPARMPRES_RESID FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_RES_TAG
ADD CONSTRAINT FKbfcjbaftmiwr3rxkwsy23vneo FOREIGN KEY (TAG_ID) REFERENCES HFJ_TAG_DEF;

ALTER TABLE IF EXISTS HFJ_RES_TAG
ADD CONSTRAINT FK_RESTAG_RESOURCE FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_RES_VER
ADD CONSTRAINT FK_RESOURCE_HISTORY_RESOURCE FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_RES_VER_PROV
ADD CONSTRAINT FK_RESVERPROV_RES_PID FOREIGN KEY (RES_PID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_RES_VER_PROV
ADD CONSTRAINT FK_RESVERPROV_RESVER_PID FOREIGN KEY (RES_VER_PID) REFERENCES HFJ_RES_VER;

ALTER TABLE IF EXISTS HFJ_SEARCH_INCLUDE
ADD CONSTRAINT FK_SEARCHINC_SEARCH FOREIGN KEY (SEARCH_PID) REFERENCES HFJ_SEARCH;

ALTER TABLE IF EXISTS HFJ_SPIDX_COORDS
ADD CONSTRAINT FKC97MPK37OKWU8QVTCEG2NH9VN FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_SPIDX_DATE
ADD CONSTRAINT FK_SP_DATE_RES FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_SPIDX_NUMBER
ADD CONSTRAINT FK_SP_NUMBER_RES FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_SPIDX_QUANTITY
ADD CONSTRAINT FK_SP_QUANTITY_RES FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_SPIDX_QUANTITY_NRML
ADD CONSTRAINT FK_SP_QUANTITYNM_RES FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_SPIDX_STRING
ADD CONSTRAINT FK_SPIDXSTR_RESOURCE FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_SPIDX_TOKEN
ADD CONSTRAINT FK_SP_TOKEN_RES FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_SPIDX_URI
ADD CONSTRAINT FKGXSREUTYMMFJUWDSWV3Y887DO FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS HFJ_SUBSCRIPTION_STATS
ADD CONSTRAINT FK_SUBSC_RESOURCE_ID FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS MPI_LINK
ADD CONSTRAINT FK_EMPI_LINK_GOLDEN_RESOURCE FOREIGN KEY (GOLDEN_RESOURCE_PID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS MPI_LINK
ADD CONSTRAINT FK_EMPI_LINK_PERSON FOREIGN KEY (PERSON_PID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS MPI_LINK
ADD CONSTRAINT FK_EMPI_LINK_TARGET FOREIGN KEY (TARGET_PID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS NPM_PACKAGE_VER
ADD CONSTRAINT FK_NPM_PKV_PKG FOREIGN KEY (PACKAGE_PID) REFERENCES NPM_PACKAGE;

ALTER TABLE IF EXISTS NPM_PACKAGE_VER
ADD CONSTRAINT FK_NPM_PKV_RESID FOREIGN KEY (BINARY_RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS NPM_PACKAGE_VER_RES
ADD CONSTRAINT FK_NPM_PACKVERRES_PACKVER FOREIGN KEY (PACKVER_PID) REFERENCES NPM_PACKAGE_VER;

ALTER TABLE IF EXISTS NPM_PACKAGE_VER_RES
ADD CONSTRAINT FK_NPM_PKVR_RESID FOREIGN KEY (BINARY_RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS TRM_CODESYSTEM
ADD CONSTRAINT FK_TRMCODESYSTEM_CURVER FOREIGN KEY (CURRENT_VERSION_PID) REFERENCES TRM_CODESYSTEM_VER;

ALTER TABLE IF EXISTS TRM_CODESYSTEM
ADD CONSTRAINT FK_TRMCODESYSTEM_RES FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS TRM_CODESYSTEM_VER
ADD CONSTRAINT FK_CODESYSVER_CS_ID FOREIGN KEY (CODESYSTEM_PID) REFERENCES TRM_CODESYSTEM;

ALTER TABLE IF EXISTS TRM_CODESYSTEM_VER
ADD CONSTRAINT FK_CODESYSVER_RES_ID FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS TRM_CONCEPT
ADD CONSTRAINT FK_CONCEPT_PID_CS_PID FOREIGN KEY (CODESYSTEM_PID) REFERENCES TRM_CODESYSTEM_VER;

ALTER TABLE IF EXISTS TRM_CONCEPT_DESIG
ADD CONSTRAINT FK_CONCEPTDESIG_CSV FOREIGN KEY (CS_VER_PID) REFERENCES TRM_CODESYSTEM_VER;

ALTER TABLE IF EXISTS TRM_CONCEPT_DESIG
ADD CONSTRAINT FK_CONCEPTDESIG_CONCEPT FOREIGN KEY (CONCEPT_PID) REFERENCES TRM_CONCEPT;

ALTER TABLE IF EXISTS TRM_CONCEPT_MAP
ADD CONSTRAINT FK_TRMCONCEPTMAP_RES FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS TRM_CONCEPT_MAP_GROUP
ADD CONSTRAINT FK_TCMGROUP_CONCEPTMAP FOREIGN KEY (CONCEPT_MAP_PID) REFERENCES TRM_CONCEPT_MAP;

ALTER TABLE IF EXISTS TRM_CONCEPT_MAP_GRP_ELEMENT
ADD CONSTRAINT FK_TCMGELEMENT_GROUP FOREIGN KEY (CONCEPT_MAP_GROUP_PID) REFERENCES TRM_CONCEPT_MAP_GROUP;

ALTER TABLE IF EXISTS TRM_CONCEPT_MAP_GRP_ELM_TGT
ADD CONSTRAINT FK_TCMGETARGET_ELEMENT FOREIGN KEY (CONCEPT_MAP_GRP_ELM_PID) REFERENCES TRM_CONCEPT_MAP_GRP_ELEMENT;

ALTER TABLE IF EXISTS TRM_CONCEPT_PC_LINK
ADD CONSTRAINT FK_TERM_CONCEPTPC_CHILD FOREIGN KEY (CHILD_PID) REFERENCES TRM_CONCEPT;

ALTER TABLE IF EXISTS TRM_CONCEPT_PC_LINK
ADD CONSTRAINT FK_TERM_CONCEPTPC_CS FOREIGN KEY (CODESYSTEM_PID) REFERENCES TRM_CODESYSTEM_VER;

ALTER TABLE IF EXISTS TRM_CONCEPT_PC_LINK
ADD CONSTRAINT FK_TERM_CONCEPTPC_PARENT FOREIGN KEY (PARENT_PID) REFERENCES TRM_CONCEPT;

ALTER TABLE IF EXISTS TRM_CONCEPT_PROPERTY
ADD CONSTRAINT FK_CONCEPTPROP_CSV FOREIGN KEY (CS_VER_PID) REFERENCES TRM_CODESYSTEM_VER;

ALTER TABLE IF EXISTS TRM_CONCEPT_PROPERTY
ADD CONSTRAINT FK_CONCEPTPROP_CONCEPT FOREIGN KEY (CONCEPT_PID) REFERENCES TRM_CONCEPT;

ALTER TABLE IF EXISTS TRM_VALUESET
ADD CONSTRAINT FK_TRMVALUESET_RES FOREIGN KEY (RES_ID) REFERENCES HFJ_RESOURCE;

ALTER TABLE IF EXISTS TRM_VALUESET_C_DESIGNATION
ADD CONSTRAINT FK_TRM_VALUESET_CONCEPT_PID FOREIGN KEY (VALUESET_CONCEPT_PID) REFERENCES TRM_VALUESET_CONCEPT;

ALTER TABLE IF EXISTS TRM_VALUESET_C_DESIGNATION
ADD CONSTRAINT FK_TRM_VSCD_VS_PID FOREIGN KEY (VALUESET_PID) REFERENCES TRM_VALUESET;

ALTER TABLE IF EXISTS TRM_VALUESET_CONCEPT
ADD CONSTRAINT FK_TRM_VALUESET_PID FOREIGN KEY (VALUESET_PID) REFERENCES TRM_VALUESET;
